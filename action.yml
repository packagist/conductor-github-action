name: 'Private Packagist Conductor'
description: 'GitHub Action to integrate Private Packagist Conductor with your CI'

author: Packagist Conductors GmbH <contact@packagist.com>

inputs:
    file_pattern:
        description: The file pattern used for `git add`. For example `composer.*`
        default: '.'
        required: false
    skip_git_hooks:
        description: Skip any git hooks that get installed as part of the GitHub Action e.g. during composer install or update.
        default: 'false'
        required: false

runs:
    using: "composite"
    steps:
        - name: Set Conductor version
          shell: "bash"
          run: echo "CONDUCTOR_ACTION_VERSION=1.5.0" >> $GITHUB_ENV
        - run: |
            CONDUCTOR_TOKEN=$(jq -r '.client_payload.composerAuthentication.token' $GITHUB_EVENT_PATH)
            echo "::add-mask::$CONDUCTOR_TOKEN"
          if: ${{ github.event.client_payload.composerAuthentication.type != 'none' }}
          shell: "bash"

        - name: "Validate GitHub action version"
          shell: "bash"
          run: "${GITHUB_ACTION_PATH}/bin/ci_version_check.sh ${{ github.event.client_payload.requirements.minimumCiActionVersion }} $CONDUCTOR_ACTION_VERSION"

        - name: "Validate PHP version"
          shell: "bash"
          run: "${GITHUB_ACTION_PATH}/bin/php_version_check.sh ${{ github.event.client_payload.requirements.minimumPhpVersion }}"

        - name: "Validate Composer version"
          shell: "bash"
          run: "${GITHUB_ACTION_PATH}/bin/composer_version_check.sh ${{ github.event.client_payload.requirements.minimumComposerVersion }}"

        - name: Store commit info
          id: commit_info
          run: |
            git log -1 --format="HASH=%H" >> $GITHUB_OUTPUT
            git log -1 --format="AUTHOR=%an" >> $GITHUB_OUTPUT
            git log -1 --format="MESSAGE=%s" >> $GITHUB_OUTPUT
          shell: bash

        - name: Configure Composer authentication
          shell: "bash"
          if: ${{ github.event.client_payload.composerAuthentication.type == 'environment' }}
          run: echo 'COMPOSER_AUTH=${{ github.event.client_payload.composerAuthentication.environment }}' >> "$GITHUB_ENV"

        - name: Install dependencies
          uses: ramsey/composer-install@3cf229dc2919194e9e36783941438d17239e8520 # 3.1.1
          with:
              working-directory: "${{ github.event.client_payload.workingDirectory }}"
              composer-options: "${{ github.event.client_payload.settings.debug == true && '-vvv' || '' }}"

        - name: Modify requirements in the composer.json
          run: "${{ github.event.client_payload.settings.debug == true && github.event.client_payload.requireCommand.debug || github.event.client_payload.requireCommand.plain }}"
          if: ${{ github.event.client_payload.requireCommand }}
          shell: bash
          working-directory: "${{ github.event.client_payload.workingDirectory }}"

        - name: Composer update
          run: "${{ github.event.client_payload.settings.debug == true && github.event.client_payload.updateCommand.debug || github.event.client_payload.updateCommand.plain }}"
          shell: bash
          working-directory: "${{ github.event.client_payload.workingDirectory }}"

        - name: Uninstall git hooks
          if: ${{ inputs.skip_git_hooks != 'false' }}
          run: "rm -rf .git/hooks"
          shell: "bash"

        - name: Create branch
          run: git checkout -b $BRANCH
          shell: bash
          env:
              BRANCH: ${{ github.event.client_payload.branch }}

        - name: Add files
          run: |
              read -r -a PATTERN_EXPANDED <<< "$FILE_PATTERN";
              git add ${FILE_PATTERN:+"${PATTERN_EXPANDED[@]}"};
          shell: bash
          env:
              FILE_PATTERN: ${{ inputs.file_pattern }}

        - name: Commit
          uses: qoomon/actions--create-commit@dfef4d264de752be6d6195a4d61a2f3d3262d406 # v1.2.3
          with:
              message: ${{ github.event.client_payload.commitMessage }}
              skip-empty: true

        - name: Store number of changed files
          id: number_of_changed_files
          run: echo "COUNT=$(git --no-pager diff --name-only $GITHUB_SHA | wc -l | tr -d ' ')" >> $GITHUB_OUTPUT
          shell: bash

        - name: Push branch
          run: git push origin $BRANCH --force
          shell: bash
          if: ${{ steps.number_of_changed_files.outputs.COUNT != 0 }}
          env:
              BRANCH: ${{ github.event.client_payload.branch }}

        - name: Call webhook from Private Packagist to create the pull request
          shell: bash
          env:
            RUN_ID: ${{ github.run_id }};
            CHANGED_FILES: ${{ steps.number_of_changed_files.outputs.COUNT }}
            COMMIT_HASH: ${{ steps.commit_info.outputs.HASH }}
            COMMIT_AUTHOR: ${{ steps.commit_info.outputs.AUTHOR }}
            COMMIT_MESSAGE: ${{ steps.commit_info.outputs.MESSAGE }}
          run: |
            jq -n '{
              "runId": env.RUN_ID,
              "numberOfChangedFiles": env.CHANGED_FILES,
              "commitInfo": {
                "hash": env.COMMIT_HASH,
                "author": env.COMMIT_AUTHOR,
                "message": env.COMMIT_MESSAGE
              },
              "versions": {
                "ciScriptVersion": env.CONDUCTOR_ACTION_VERSION
              }
            }' | curl -fsSL -X POST \
              -u "${{ github.event.client_payload.webhook.authentication.username }}:${{ github.event.client_payload.webhook.authentication.password }}" \
              --header "Content-Type: application/json" \
              --data @- \
              "${{ github.event.client_payload.webhook.executedUrl }}"

        - name: Call webhook from Private Packagist to notify about build failure
          shell: bash
          env:
            RUN_ID: ${{ github.run_id }}
            COMMIT_HASH: ${{ steps.commit_info.outputs.HASH }}
            COMMIT_AUTHOR: ${{ steps.commit_info.outputs.AUTHOR }}
            COMMIT_MESSAGE: ${{ steps.commit_info.outputs.MESSAGE }}
          if: ${{ failure() }}
          run: |
            jq -n '{
              "runId": env.RUN_ID,
              "commitInfo": {
                "hash": env.COMMIT_HASH,
                "author": env.COMMIT_AUTHOR,
                "message": env.COMMIT_MESSAGE
              },
              "versions": {
                "ciScriptVersion": env.CONDUCTOR_ACTION_VERSION
              }
            }' | curl -fsSL -X POST \
              -u "${{ github.event.client_payload.webhook.authentication.username }}:${{ github.event.client_payload.webhook.authentication.password }}" \
              --header "Content-Type: application/json" \
              --data @- \
              "${{ github.event.client_payload.webhook.errorUrl }}"
